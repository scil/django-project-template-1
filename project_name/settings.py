"""
Django settings for {{ project_name }} project.

Generated by 'django-admin startproject' using Django {{ django_version }}

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""

"""# if env is in resources/env.json :
# https://github.com/key/django-project-template/blob/master/resources/env.json
# load basic configurations
try:
    env = json.load(open(os.path.join(base_dir, 'resources', 'env.json')))
except (filenotfounderror, json.jsondecodeerror):
    env = {
        'django_secret_key': os.environ['django_secret_key'],
        'django_debug': eval(os.environ.get('django_debug', 'false').title()),
        'database_url': os.environ.get('database_url', 'sqlite:///db.sqlite3'),
        'sentry_dsn': os.environ.get('sentry_dsn'),  # optional
    }
"""    
# Build paths inside the project like this: os.path.join(DJ_PROJECT_DIR, ...)
import os

# maybe loading .env is not necessary,   pipenv can be used to load  .env
#   https://github.com/jpadilla/django-project-template/commit/43ede725be1f9fbb4a0e7f25ad4ad77604feb8cb
import environ

# 3:  root_dir/project_name/settings.py
# 2:  root_dir/settings.py
root = environ.Path(__file__) - 2  # three folder back (/a/b/c/ - 3 = /)
env = environ.Env(DEBUG=(bool, False), )  # set default values and casting
environ.Env.read_env(root('.env'))  # reading .env file


# where .env exists
ROOT_DIR = root()

# where django project,  equals ROOT_DIR or a subdir of ROOT_DIR
DJ_PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
DJ_PROJECT_NAME = os.path.basename(DJ_PROJECT_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DJANGO_DEBUG')

DEBUG_TOOLBAR_ENABLE = env('DJANGO_DEBUG_TOOLBAR_ENABLE')

COMPRESS_ENABLED = env('DJANGO_COMPRESS_ENABLED', default = not DEBUG)



ALLOWED_HOSTS = [
    '*',
]

INTERNAL_IPS = [
    '127.0.0.1',
    '192.168.1.108',
]


# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/
# When support for time zones is enabled, Django stores datetime information in UTC in the database, uses time-zone-aware datetime objects internally, and translates them to the end user’s time zone in templates and forms.
# This is handy if your users live in more than one time zone and you want to display datetime information according to each user’s wall clock.
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/timezones/

USE_TZ = True

# TIME_ZONE = 'Asia/Shanghai'
TIME_ZONE = 'UTC'

# it provides a fallback language
# LANGUAGE_CODE = 'zh-Hans'
LANGUAGE_CODE = 'en-us'

USE_I18N = env('DJANGO_USE_I18N', True)

# If you set this to True, Django will format dates, numbers and calendars
# according to user current locale.
USE_L10N = True

from django.utils.translation import ugettext_lazy as _

LANGUAGES = (
    ('en', _('English')),
    ('zh-cn', _('Chinese')),
    ('zh-hans', '中文简体'),
    # ('zh', '简体中文'),
    # ('zh-cn', '大陆简体中文'),
    # ('zh-tw', '台湾繁體中文'),
    # ('de', _('German')),
)

LANGUAGE_COOKIE_NAME = DJ_PROJECT_NAME + '_language'

# Application definition

_INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'django_extensions',
    "compressor" if COMPRESS_ENABLED else None,
    'debug_toolbar' if DEBUG_TOOLBAR_ENABLE else None,
]
INSTALLED_APPS = list(filter(None.__ne__, _INSTALLED_APPS))

_MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # optional
    # This middleware class looks at the user’s browser language and sets the language of the site accordingly.
    # It should come after SessionMiddleware, because LocaleMiddleware makes use of session data. And it should come before CommonMiddleware because CommonMiddleware needs an activated language in order to resolve the requested URL.
    # https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/translation/#how-django-discovers-language-preference
    'django.middleware.locale.LocaleMiddleware' if USE_I18N else None,

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    #  include the Debug Toolbar middleware as early as possible in the list. However, it must come after any other middleware that encodes the response’s content, such as GZipMiddleware.
    # https://django-debug-toolbar.readthedocs.io/en/latest/installation.html
    'debug_toolbar.middleware.DebugToolbarMiddleware' if DEBUG_TOOLBAR_ENABLE else None,
]
MIDDLEWARE = list(filter(None.__ne__, _MIDDLEWARE))


# https://django-debug-toolbar.readthedocs.org
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TEMPLATE_CONTEXT': True,
    'ENABLE_STACKTRACES': True,
    'SQL_WARNING_THRESHOLD': 100,  # milliseconds
    'JQUERY_URL': "https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js",
    # only for super user
    # "SHOW_TOOLBAR_CALLBACK": lambda request: not request.is_ajax() and request.user and request.user.is_superuser
}
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(DJ_PROJECT_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


public_root = root.path('public/')

MEDIA_ROOT = os.path.join(ROOT_DIR, 'media')
MEDIA_URL = '/media/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/

STATIC_URL = '/static/'

#  list of folders where Django will search for additional static files aside from the static folder of each app installed
STATICFILES_DIRS = (
    os.path.join(DJ_PROJECT_DIR, 'static'),
    # '/var/www/static/',
)

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# Javascript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/2.1/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# the folder where static files will be stored after using manage.py collectstatic
# STATIC_ROOT is useless during development, it's required by nginx,
# as Nginx doesn't know anything about your django project and doesn't know where to find static files.
#    location ^~ /static {
#           alias /project/path/www/;
#     }
#STATIC_ROOT = os.path.join(ROOT_DIR, 'static')
STATIC_ROOT = public_root('static')

_STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',


    'compressor.finders.CompressorFinder' if COMPRESS_ENABLED else None,
)
STATICFILES_FINDERS = list(filter(None.__ne__, _STATICFILES_FINDERS))

# Using Argon2 with Django https://docs.djangoproject.com/en/{{ docs_version }}/topics/auth/passwords/#using-argon2-with-django
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

# SESSION_COOKIE_SECURE = False
# SECURE_BROWSER_XSS_FILTER = False
# SECURE_CONTENT_TYPE_NOSNIFF = False
# SECURE_HSTS_INCLUDE_SUBDOMAINS = False
# SECURE_HSTS_SECONDS = 86400
# SECURE_REDIRECT_EXEMPT = []
# SECURE_SSL_HOST = None
# SECURE_SSL_REDIRECT = False
# SECURE_PROXY_SSL_HEADER = (
#     ('HTTP_X_FORWARDED_PROTO', 'https'),
# )

# rest framework
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
}

# Sentry
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

SENTRY_DSN = env('SENTRY_DSN')
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
    )


# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases
DATABASES = {
    'default': env.db(),  # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
    # 'extra': env.db('SQLITE_URL', default='sqlite:////tmp/my-tmp-sqlite.db')
    'extra': env.db('SQLITE_URL', default='sqlite:///' + root('db.sqlite3'))
}
